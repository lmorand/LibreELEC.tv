From 5b05a3c5e9f301402c7bcbd81681188e070d994a Mon Sep 17 00:00:00 2001
From: Herman Chen <herman.chen@rock-chips.com>
Date: Fri, 25 Jun 2021 10:25:49 +0800
Subject: [PATCH] [misc]: Add O_CLOEXEC flag on file open

When /dev/mpp_service is opened and be forked to another thread the
leaked fd will increase file refcnt in kernel.
Then the codec kernel session will be leaked on mpp_destroy.

Change-Id: I5bb682792c8e58591ec3a21af36e3f8a967f77fb
Signed-off-by: Herman Chen <herman.chen@rock-chips.com>
---
 mpp/legacy/vpu.c               | 6 +++---
 mpp/vproc/iep/iep.cpp          | 2 +-
 mpp/vproc/iep2/iep2.c          | 2 +-
 mpp/vproc/rga/rga.cpp          | 2 +-
 osal/allocator/allocator_drm.c | 2 +-
 osal/allocator/allocator_ion.c | 2 +-
 osal/driver/mpp_server.cpp     | 2 +-
 osal/driver/mpp_service.c      | 6 +++---
 osal/driver/vcodec_service.c   | 2 +-
 9 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/mpp/legacy/vpu.c b/mpp/legacy/vpu.c
index 8f59e7cb..2352e4b8 100644
--- a/mpp/legacy/vpu.c
+++ b/mpp/legacy/vpu.c
@@ -158,7 +158,7 @@ int VPUClientInit(VPU_CLIENT_TYPE type)
     }
 
     path = mpp_get_vcodec_dev_name(ctx_type, coding);
-    fd = open(path, O_RDWR);
+    fd = open(path, O_RDWR | O_CLOEXEC);
 
     mpp_env_get_u32("vpu_debug", &vpu_debug, 0);
 
@@ -335,9 +335,9 @@ RK_U32 VPUCheckSupportWidth()
 {
     VPUHwDecConfig_t hwCfg;
     int fd = -1;
-    fd = open("/dev/vpu_service", O_RDWR);
+    fd = open("/dev/vpu_service", O_RDWR | O_CLOEXEC);
     if (fd < 0) {
-        fd = open("/dev/vpu-service", O_RDWR);
+        fd = open("/dev/vpu-service", O_RDWR | O_CLOEXEC);
     }
     memset(&hwCfg, 0, sizeof(VPUHwDecConfig_t));
     if (fd >= 0) {
diff --git a/mpp/vproc/iep/iep.cpp b/mpp/vproc/iep/iep.cpp
index dab8d371..41526986 100644
--- a/mpp/vproc/iep/iep.cpp
+++ b/mpp/vproc/iep/iep.cpp
@@ -72,7 +72,7 @@ MPP_RET iep_init(IepCtx *ctx)
             break;
         }
 
-        fd = open(iep_name, O_RDWR);
+        fd = open(iep_name, O_RDWR | O_CLOEXEC);
         if (fd < 0) {
             mpp_err("can NOT find iep device %s\n", iep_name);
             break;
diff --git a/mpp/vproc/iep2/iep2.c b/mpp/vproc/iep2/iep2.c
index 6cdfa65f..9bf19d66 100644
--- a/mpp/vproc/iep2/iep2.c
+++ b/mpp/vproc/iep2/iep2.c
@@ -51,7 +51,7 @@ static MPP_RET iep2_init(IepCtx *ictx)
 
     mpp_env_get_u32("iep_debug", &iep_debug, 0);
 
-    ctx->fd = open("/dev/mpp_service", O_RDWR);
+    ctx->fd = open("/dev/mpp_service", O_RDWR | O_CLOEXEC);
     if (ctx->fd < 0) {
         mpp_err("can NOT find device /dev/iep2\n");
         return MPP_NOK;
diff --git a/mpp/vproc/rga/rga.cpp b/mpp/vproc/rga/rga.cpp
index 001622f6..8e05c4df 100755
--- a/mpp/vproc/rga/rga.cpp
+++ b/mpp/vproc/rga/rga.cpp
@@ -118,7 +118,7 @@ MPP_RET rga_init(RgaCtx *ctx)
         goto END;
     }
 
-    impl->rga_fd = open(DEFAULT_RGA_DEV, O_RDWR, 0);
+    impl->rga_fd = open(DEFAULT_RGA_DEV, O_RDWR | O_CLOEXEC, 0);
     if (impl->rga_fd < 0) {
         mpp_err_f("open device failed\n");
         mpp_free(impl);
diff --git a/osal/allocator/allocator_drm.c b/osal/allocator/allocator_drm.c
index 6d984de3..026a5dc4 100644
--- a/osal/allocator/allocator_drm.c
+++ b/osal/allocator/allocator_drm.c
@@ -196,7 +196,7 @@ static MPP_RET os_allocator_drm_open(void **ctx, MppAllocatorCfg *cfg)
 
     mpp_env_get_u32("drm_debug", &drm_debug, 0);
 
-    fd = open(dev_drm, O_RDWR);
+    fd = open(dev_drm, O_RDWR | O_CLOEXEC);
     if (fd < 0) {
         mpp_err_f("open %s failed!\n", dev_drm);
         return MPP_ERR_UNKNOW;
diff --git a/osal/allocator/allocator_ion.c b/osal/allocator/allocator_ion.c
index 1309e39d..559eaea1 100755
--- a/osal/allocator/allocator_ion.c
+++ b/osal/allocator/allocator_ion.c
@@ -293,7 +293,7 @@ static MPP_RET allocator_ion_open(void **ctx, MppAllocatorCfg *cfg)
 
     *ctx = NULL;
 
-    fd = open(dev_ion, O_RDWR);
+    fd = open(dev_ion, O_RDWR | O_CLOEXEC);
     if (fd < 0) {
         mpp_err("open %s failed!\n", dev_ion);
         return MPP_ERR_UNKNOW;
diff -ruPN rkmmp/osal/driver/mpp_service.c rkmmp-new/osal/driver/mpp_service.c
--- rkmmp/osal/driver/mpp_service.c	2020-11-23 07:26:16.000000000 +0100
+++ rkmmp-new/osal/driver/mpp_service.c	2022-01-09 19:33:32.301800320 +0100
@@ -145,7 +145,7 @@
     *codec_type = 0;
     memset(hw_ids, 0, sizeof(RK_U32) * 32);

-    fd = open(mpp_service_name, O_RDWR);
+    fd = open(mpp_service_name, O_RDWR | O_CLOEXEC);
     if (fd < 0) {
         mpp_err("open mpp_service to check cmd capability failed\n");
         memset(cap, 0, sizeof(*cap));
@@ -270,7 +270,7 @@
     MPP_RET ret = MPP_NOK;

     p->cap = mpp_get_mpp_service_cmd_cap();
-    p->fd = open(mpp_service_name, O_RDWR);
+    p->fd = open(mpp_service_name, O_RDWR | O_CLOEXEC);
     if (p->fd < 0) {
         mpp_err("open mpp_service failed\n");
         return ret;
diff --git a/osal/driver/vcodec_service.c b/osal/driver/vcodec_service.c
index 517c995b..55554b5b 100644
--- a/osal/driver/vcodec_service.c
+++ b/osal/driver/vcodec_service.c
@@ -487,7 +487,7 @@ MPP_RET vcodec_service_init(void *ctx, MppClientType type)
     } break;
     }
 
-    p->fd = open(name, O_RDWR);
+    p->fd = open(name, O_RDWR | O_CLOEXEC);
     if (p->fd < 0) {
         mpp_err("open vcodec_service %s failed\n", name);
         return ret;
